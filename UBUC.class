package test;

import java.util.Random;

public class UBUC {
	/**
	 * @param a
	 * @return
	 * Calculating Sum of Single Chars
	 */
	public static int a(int a){int b=0;for(int x:(a+"").toCharArray()){b+=(x-'0');}return b;}
	/**
	 * @param a
	 * @return
	 * Recursively calculate Sum of the single chars down to 1 char
	 */
	public static int b(int a){return(a>9)?b(a(a)):a;}
	/**
	 * @param s
	 * @return
	 * Invert String
	 */
	public static String c(String s){for(int k=s.length()-1;k>=0;k--)s+=s.toCharArray()[k];return s.substring(s.length()/2);}
	/**
	 * @param a
	 * @return
	 * Check if even
	 */
	public static boolean d(int a){return (a%2)==0;}
	/**
	 * @param x
	 * @param e
	 * @return
	 * Check if Array contains int e
	 */
	public static boolean e(int[] x,int e){for(Object o : x)if(o.equals(e))return true;return false;}
	/**
	 * @param x
	 * @return
	 * Find Min/Max
	 */
	public static int[] f(int[] x){int a,b;a=Integer.MAX_VALUE;b=Integer.MIN_VALUE;for(int k:x)if(k>b)b=k;else if(k<a)a=k;return new int[] {a,b};}
	/**
	 * @param n
	 * @return
	 * Get Primes in n Range
	 */
	public static int[] g(long n){int[] r=new int[1];for(int x=0;x<n;x++)if(l(x))r=h(r,x);return r;}	
	/**
	 * @param r
	 * @param x
	 * @return
	 * Insert x at the end of r
	 */
	public static int[] h(int[] r, int x) {int[] y = new int[r.length+1];for(int i=0;i<r.length;i++)y[i]=r[i];y[r.length]=x;return y;}
	public static long[] h(long[] r, long x) {long[] y = new long[r.length+1];for(int i=0;i<r.length;i++)y[i]=r[i];y[r.length]=x;return y;}
	/**
	 * @param x
	 * @return
	 * Ascending Number Array
	 */
	public static int[] i(int x){int[] t=new int[x];for(int i=0;i<x;i++)t[i]=i;return t;}
	/**
	 * @param x
	 * @return
	 * Generates a Random String with x length
	 */	
	public static String j(int x){return _j("",x);}
	/**
	 * @param x
	 * @param cs
	 * @return
	 * Generates a Random String with x length and only chars contained in cs
	 */
	public static String j(int x,String cs){return _j("",x,cs);}
	private static String _j(String s,int x){char[] c="abcdefghijklmnopqrstuvwxyz".toCharArray();if(x > 0)return _j(c[(new Random().nextInt(26))] + s,x-1);else return s;}
	private static String _j(String s,int x,String cs){char[] c=cs.toCharArray();if(x > 0)return _j(c[(new Random().nextInt(cs.length()))] + s,x-1,cs);else return s;}
	/**
	 * @param x
	 * @return
	 * Split at Whitespaces
	 */
	public static String[] k(String x){return x.split("\\s+");}
	/**
	 * 
	 * @param n
	 * @return
	 * Check if n is Prime
	 */
	public static boolean l(long n) {if(n<2) return false;if(n==2||n==3) return true;if(n%2 == 0 || n%3 == 0) return false;for(long i=6L;i<=(long)Math.sqrt(n)+1;i+=6)if(n%(i-1)==0||n%(i+1)==0) return false; return true;}
	/**
	 * @param c
	 * @return
	 * To Alpha-Number
	 */
	public static int m(char c){return (""+c).toLowerCase().toCharArray()[0]-'a';}
	/**
	 * @param x
	 * @return
	 * To Alpha-Char
	 */
	public static char n(int x){return (char) (x+'a');}
	/**
	 * @param x
	 * @param k
	 * @return
	 * Caesar encode
	 */
	public static String o(String x, int k){char[] l = x.toCharArray();for(int i = 0; i < l.length; i++){l[i] = n((m(x.toCharArray()[i])+k%26));}return new String(l);}
	/**
	 * @param x
	 * @return
	 * Invert Case
	 */
	public static String p(String x){char[] l=x.toCharArray();x="";for(char c:l)if(c>='a')x+=(char)(c-32);else if(c<='Z')x+=(char)(c+32);return x;}
	/**
	 * @param x
	 * @param l
	 * @param r
	 * Quicksort
	 */
	public static void q(int x[], int l, int r){int index = _q(x, l, r);if (l < index - 1)q(x, l, index - 1);if (index < r)q(x, index, r);}
	private static int _q(int x[], int l, int r){int i = l, j = r;int tmp;int pivot = x[(l + r) / 2];while (i <= j){while (x[i] < pivot)i++;while (x[j] > pivot)j--;if (i <= j){tmp = x[i];x[i] = x[j];x[j] = tmp;i++;j--;}}return i;}
	/**
	 * @param x
	 * @param b
	 * @return
	 * Sub-Array starting at index b
	 */
	public static long[] r(long[] x, int b){long[]n = new long[x.length-b];for(int i = b; i < x.length; i++)n[i-b] = x[i];return n;}
	/**
	 * @param n
	 * @return
	 * Generate n Fibonacci Numbers
	 */
	public static long[] s(int n){long [] r = new long[2];r[0]=1;for(long i = 0; i < n; i++)r=h(r,r[r.length-1]+r[r.length-2]);return r(r,3);}
	/**
	 * @return
	 * abc string
	 */
	public static String t(){return "abcdefghijklmnopqrstuvwxyz";}	
	/**
	 * @param x
	 * @return
	 * Recursive Bubble Sort
	 */
	public static int[] u(int[] x){return _u(x,0,x.length);}
	private static int[] _u(int[] a,int s,int e){if(s>e)return a;if(s==e-1)_u(a,0, e-1);else if(a[s]>a[s+1]){int c=a[s];a[s]=a[s+1];a[s+1]=c;_u(a,s+1,e);}else _u(a,s+1,e);return a;}
	/**
	 * @param x
	 * @return
	 * Recursive Bubble Sort
	 */
	public static double[] u(double[] x){return _u(x,0,x.length);}
	private static double[] _u(double[] a,int s,int e){if(s>e)return a;if(s==e-1)_u(a,0, e-1);else if(a[s]>a[s+1]){double c=a[s];a[s]=a[s+1];a[s+1]=c;_u(a,s+1,e);}else _u(a,s+1,e);return a;}
	/**
	 * @param x
	 * @return
	 * Recursive Bubble Sort
	 */
	public static float[] u(float[] x){return _u(x,0,x.length);}
	private static float[] _u(float[] a,int s,int e){if(s>e)return a;if(s==e-1)_u(a,0, e-1);else if(a[s]>a[s+1]){float c=a[s];a[s]=a[s+1];a[s+1]=c;_u(a,s+1,e);}else _u(a,s+1,e);return a;}
	/**
	 * @param x
	 * @return
	 * Recursive Bubble Sort
	 */
	public static long[] u(long[] x){return _u(x,0,x.length);}
	private static long[] _u(long[] a,int s,int e){if(s>e)return a;if(s==e-1)_u(a,0, e-1);else if(a[s]>a[s+1]){long c=a[s];a[s]=a[s+1];a[s+1]=c;_u(a,s+1,e);}else _u(a,s+1,e);return a;}
	/**
	 * @param x
	 * @return
	 * Recursive Bubble Sort
	 */
	public static byte[] u(byte[] x){return _u(x,0,x.length);}
	private static byte[] _u(byte[] a,int s,int e){if(s>e)return a;if(s==e-1)_u(a,0, e-1);else if(a[s]>a[s+1]){byte c=a[s];a[s]=a[s+1];a[s+1]=c;_u(a,s+1,e);}else _u(a,s+1,e);return a;}
	/**
	 * @return
	 * Table of Content
	 */
	public static String zzz(){
		return "//Helper Methods" +
				"\nzzz  Table of Content (this :D)" +
				"\n//Public Static Methods" +
				"\na    Charsum" +
				"\nb    Recursive Charsum" +
				"\nc    Invert String" +
				"\nd    Check if even" +
				"\ne    Check if Array contains" +
				"\nf    Find Min/Max" +
				"\ng    Get Primes" +
				"\nh    Append to Array" +
				"\ni    Ascending Number Array" +
				"\nj    Random Alphabetic String / Presetable Chars" +
				"\nk    Split at Whitespaces" +
				"\nl    Check for Primality" +
				"\nm    To Alpha-Number" +
				"\nn    To Alpha-Char" +
				"\no    Caesar Encode" +
				"\np    Invert Case" +
				"\nq    Quicksort" +
				"\nr    Subarray" +
				"\ns    Generate Fibonacci Numbers" +
				"\nt    abcdef... String" +
				"\nu    Recursive Bubblesort" +
				"\nv    Empty" +
				"\nw    Empty" +
				"\nx    Empty" +
				"\ny    Empty" +
				"\nz    Empty" +
				"\n//Private Static Methods" +
				"\n_j   Recursive Method for adding Random Chars" +
				"\n_q   Arranging Array for Quicksort" +
				"\n_u   Actual Bubble Sorting Method";
	}

}